== Sistema operativo utilizado para compilar==

Arch Linux 64-bit con núcleo 4.18.12-arch1-1-ARCH

== Implementación de OpenGL y librerías auxiliares ==

- mesa 18.2.3-1
- glew 2.1.0-1
- glfw-x11 3.2.1-1
- libjpeg-turbo 2.0.0-1

== Comentarios P1 ==

- Se ha realizado la programación más básica del cauce gráfico, empleando la clase ShaderProg.
Los shaders se encuentran en los archivos 'simple_fs.glsl' y 'simple_vs.glsl', y pueden activarse
poniendo a 'true' el atributo usarShaders de un ContextoVis.

- Se permite visualizar un cubo y un tetraedro (regular) centrados en un punto arbitrario
y con longitud de aristas también arbitraria.

- Se añade la posibilidad de colorear un objeto de la clase MallaInd, mediante los métodos
fijarColorNodo y setColorVertices.

- Con la tecla v/V se puede cambiar el modo de envío (inmediato <--> diferido).

- Se permite cambiar la forma de envío dentro del modo inmediato con la macro
MODO_INMEDIATO_DRAW_ELEMENTS (0 usa glBegin/glEnd, 1 usa glDrawElements).

- Se añade una clase Plano que representa una cara de un cubo (un plano). Se hace uso de ella
en el modelo jerárquico de la P3.

== Comentarios P2 ==

- Se pueden pasar como parámetros por línea de comandos tanto el nombre del archivo ply
para contruir el objeto MallaPLY como el del archivo para construir el objeto MallaRevol.
Si solo se pasa uno, se considera que es para el primero.

- El cilindro, el cono y la esfera pueden tener radio y/o altura variable.

== Comentarios P3 ==

- Se opta por declarar clases anidadas para limitar el ámbito de las mismas, pues existen
solo con el objetivo de crear objetos compuestos a partir de ellas.

- Hay distintos métodos de coloreado:

  a) Gradiente. Si asignamos 0 a la macro TEST_COLOREADO, obtendremos el objeto coloreado mediante
  un gradiente azul-negro. Este es el método por defecto de coloreado de objetos de MallaInd.

  b) Color plano en cada nodo. Si asignamos 1 a la macro TEST_COLOREADO, obtendremos la caja que envuelve al tendedor coloreada de un color plano, y el resto del objeto coloreado con el
  gradiente ya mencionado. Notemos que se puede modificar el código para colorear otros nodos de
  otros colores, sin más que llamar a la función fijarColorNodo en el constructor del nodo deseado.

  c) Un vértice de cada color en cada objeto simple (coloreado manual). Mediante una llamada a
  setColorVertices en objetos de MallaInd de un nodo, podemos especificar un vector de colores que
  correspondan a cada vértice del objeto. Hay que realizar esta llamada manualmente para cada objeto
  de MallaInd que queramos colorear así, y asegurarse de que el vector de colores que pasamos tiene
  tantas entradas como vértices tiene el objeto.

== Comentarios P4 ==

- La escena se compone de dos objetos de tipo 'NodoGrafoEscena': una lata por un lado y tres peones por otro.

- Hay dos luces: una posicional y otra direccional.

- Se han añadido materiales muy simples a la práctica 3.

== Comentarios P5 ==

- Hay cuatro cámaras interactivas: tres en perspectiva de alzado, planta y perfil, y una cuarta en vista ortográfica de alzado.

== Cambios en el código proporcionado ==

- Los datos 'private' de Objeto3D pasan a ser 'protected'.

- Se añade un método virtual a Objeto3D llamado 'fijarColorNodo', para proporcionar compatibilidad
en la implementación (recursiva) del método homónimo en NodoGrafoEscena.

- Se añade un método 'fijarViewport' a la clase Viewport, encargado de realizar una llamada a glViewport.
